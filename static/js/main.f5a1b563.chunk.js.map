{"version":3,"sources":["Counter.tsx","SetCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Counter","props","className","errorValue","displayValue","disabled","maxValue","onClick","addValue","value","resetValue","SetCounter","type","onChange","e","changeMinValue","currentTarget","valueAsNumber","changeMaxValue","setButton","App","useState","minValue","setMinValue","setMaxValue","display","setDisplay","error","setError","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sRAaaA,G,YAAU,SAACC,GAEpB,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAWD,EAAME,WAAa,QAAU,iBACzC,2BAAIF,EAAMG,eAEd,yBAAKF,UAAU,eACX,4BAAQG,SAAUJ,EAAMG,eAAeH,EAAMK,SAAUC,QAASN,EAAMO,SAAUN,UAAU,OAA1F,OAGA,4BAAQG,SAAUJ,EAAMG,eAAeH,EAAMQ,MAAOF,QAASN,EAAMS,WAAYR,UAAU,SAAzF,aCZHS,G,MAAa,SAACV,GAevB,OACI,yBAAKC,UAAW,cACZ,yBAAKA,UAAW,cACZ,2BAAOA,UAAW,cACd,2CACA,2BAAOA,UAAW,kBAAmBU,KAAM,SAAUH,MAAOR,EAAMQ,MAC3DI,SAfS,SAACC,GAC7Bb,EAAMc,eAAeD,EAAEE,cAAcC,mBAgB7B,2BAAOf,UAAW,YACd,yCACA,2BAAOA,UAAW,gBAAiBU,KAAM,SAAUH,MAAOR,EAAMK,SACzDO,SAvBS,SAACC,GAC7Bb,EAAMiB,eAAeJ,EAAEE,cAAcC,oBAyBjC,yBAAKf,UAAU,YACX,4BAAQK,QAnBG,WACnBN,EAAMkB,aAkBmCjB,UAAU,OAA3C,WCkDDkB,MAjFf,WACI,MAAgCC,mBAAiB,GAAjD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAiB,GAAjD,mBAAOf,EAAP,KAAiBkB,EAAjB,KACA,EAA8BH,mBAA0B,GAAxD,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA0BL,oBAAkB,GAA5C,mBAAOM,EAAP,KAAcC,EAAd,KAoDA,OACI,yBAAM1B,UAAW,QACb,yBAAKA,UAAW,aACZ,kBAAC,EAAD,CACIO,MAAOa,EACPhB,SAAUA,EACVS,eA7BO,SAACN,GACpBc,EAAYd,GACRA,EAAQ,GAGDA,GAASH,GAFhBsB,GAAS,GACTF,EAAW,uBAMXE,GAAS,GACTF,EAAW,kCAmBHR,eAfO,SAACZ,GACpBkB,EAAYlB,IAeAa,UAXE,WACdO,EAAWJ,MAYH,kBAAC,EAAD,CACIb,MAAOa,EACPnB,WAAYwB,EACZvB,aAAcqB,EACdnB,SAAUA,EACVE,SA/CC,WACTiB,GAA8B,kBAAZA,GAClBC,EAAWD,EAAU,IA8Cbf,WApDG,WACfgB,EAAWJ,SCpBCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLkB,QAAQlB,MAAMA,EAAMmB,c","file":"static/js/main.f5a1b563.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport './Counter.css'\r\n\r\ntype CounterPropsType = {\r\n    value:number\r\n    displayValue: number | string\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    maxValue: number\r\n    errorValue: boolean\r\n}\r\n\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n    return (\r\n        <div className='counter'>\r\n            <div className={props.errorValue ? 'error' : 'counterScreen'}>\r\n                <p>{props.displayValue}</p>\r\n            </div>\r\n            <div className='blockButton'>\r\n                <button disabled={props.displayValue===props.maxValue} onClick={props.addValue} className='inc'>inc\r\n                </button>\r\n                {/*disabled if value ==== maxvalue*/}\r\n                <button disabled={props.displayValue===props.value} onClick={props.resetValue} className='reset'>reset</button>\r\n                {/*disabled if value ==== minvalue*/}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport './SetCounter.css'\r\n\r\n\r\ntype SetCounterPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    changeMaxValue: (maxValue: number) => void\r\n    changeMinValue: (maxValue: number) => void\r\n    setButton: () => void\r\n}\r\n\r\nexport const SetCounter = (props: SetCounterPropsType) => {\r\n\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n    const onChangeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMinValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n\r\n    const onClickHandler = () => {\r\n        props.setButton()\r\n    }\r\n\r\n    return (\r\n        <div className={'setCounter'}>\r\n            <div className={'blockValue'}>\r\n                <label className={'startValue'}>\r\n                    <b>start value:</b>\r\n                    <input className={'inputStartValue'} type={\"number\"} value={props.value}\r\n                           onChange={onChangeMinValueHandler}/>\r\n                </label>\r\n                <label className={'maxValue'}>\r\n                    <b>max value:</b>\r\n                    <input className={'inputMaxValue'} type={\"number\"} value={props.maxValue}\r\n                           onChange={onChangeMaxValueHandler}/>\r\n                </label>\r\n            </div>\r\n            <div className='blockSet'>\r\n                <button onClick={onClickHandler} className='set'>set</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport {Counter} from \"./Counter\";\r\nimport {SetCounter} from \"./SetCounter\";\r\n\r\n// type DisplayType = {\r\n//     display: number\r\n//     maxValue: number\r\n// }\r\n\r\nfunction App() {\r\n    const [minValue, setMinValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(5)\r\n    const [display, setDisplay] = useState<number | string>(0)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    // const [display, setDisplay] = useState<DisplayType | string | undefined>(undefined)\r\n\r\n    // const addValue = () => {\r\n    //     if (display && typeof display === 'number') {\r\n    //         setDisplay({display: display +1, maxValue: maxValue})\r\n    //     }\r\n    // }\r\n\r\n    // const resetValue = () => {\r\n    //     setDisplay((prev) => prev && typeof  prev !== 'string' ? ({...prev, display: minValue}) : prev)\r\n    // }\r\n\r\n\r\n    const resetValue = () => {\r\n        setDisplay(minValue)\r\n    }\r\n\r\n    const addValue = () => {\r\n        if (display && typeof display === 'number') {\r\n            setDisplay(display + 1)\r\n            // display === maxValue?setError(true):undefined\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const changeMinValue = (value: number) => {\r\n        setMinValue(value)\r\n        if (value < 0) {\r\n            setError(true)\r\n            setDisplay('Incorrect value!!')\r\n        } else if (value >= maxValue) {\r\n            setError(true)\r\n            setDisplay('Incorrect value!!')\r\n\r\n        } else {\r\n            setError(false)\r\n            setDisplay(\"enter values and press 'set'\")\r\n        }\r\n    }\r\n\r\n    const changeMaxValue = (maxValue: number) => {\r\n        setMaxValue(maxValue)\r\n\r\n    }\r\n\r\n    const setButton = () => {\r\n        setDisplay(minValue)\r\n    }\r\n    return (\r\n        < div className={'body'}>\r\n            <div className={'CouterApp'}>\r\n                <SetCounter\r\n                    value={minValue}\r\n                    maxValue={maxValue}\r\n                    changeMinValue={changeMinValue}\r\n                    changeMaxValue={changeMaxValue}\r\n                    setButton={setButton}\r\n                />\r\n                <Counter\r\n                    value={minValue}\r\n                    errorValue={error}\r\n                    displayValue={display}\r\n                    maxValue={maxValue}\r\n                    addValue={addValue}\r\n                    resetValue={resetValue}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}